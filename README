Redux has a simple goal:
To reduce the amount of code you need to write when using Appcelerator Titanium.

To use its features, include the redux.js or redux.min.js file at the top of your app.js:
	Ti.include('redux.js');

-----------------------------------------------------------------------------------------
- FEATURES
-----------------------------------------------------------------------------------------

----------------------------------------------
- SHORTHAND FOR COMMON FUNCTIONS
----------------------------------------------

Some functions you use all the time. Redux makes them shorter, and easier to type.

_Normal Code					
Titanium.API.info('hi');		
Titanium.API.error('hi');		
Titanium.API.warn('hi');		
Titanium.API.log('hi');			
Titanium.include('foo.js');		

_Redux Code		
info('hi');		
error('hi');		
warn('hi');		
log('hi');		
include('foo.js');	
	
----------------------------------------------
- UI CONSTRUCTION
----------------------------------------------

Create new Ti elements using the new Constructor() syntax you're used to in JavaScript.
Note that by making your elements this way, you also get to take advantage of other
Redux features like JSS, default properties, and more. You can use this syntax for any
element normally created using the syntax Ti.*.create*. For example, Ti.Network.createHTTPClient()
and Ti.UI.createLabel() could instead by new HTTPClient() or new Label(), respectively.

_Normal Code		
var label = Titanium.UI.createLabel();

_Redux Code		
var label = new Label();


----------------------------------------------
- SELECTING ELEMENTS
----------------------------------------------

When you create elements using redux, you can select them out later much like you can in
the popular JavaScript library jQuery.

_Normal Code		
Not Supported		

_Redux Code		
var label = new Label({ className: 'labelClass', id: 'labelWithID' });	
var allMyLabels = $('Label');	
var labelsWithClass = $('.labelClass');	
var labelByID = $('#labelWithID');	
alert(labelByID[0] = label);	

----------------------------------------------
- UI PROPERTY DEFAULTS BY ELEMENT TYPE
----------------------------------------------

You can specify default properties for your UI elements. This lets you specify properties
in one place, and for multiple elements. This is especially useful for application wide
settings, like fonts and colors, but also useful to help you keep your design logic out of
your business logic. Note that property defaults by element type are considered less
important than property defaults by ID or properties passed in to the constructor, and can be
overridden by either of these.

_Normal Code		
Not Supported		

_Redux Code		
Label.setDefault({ font: {fontWeight: 'bold' } });		
var label = new Label();		
alert(label.font.fontWeight == 'bold');		


----------------------------------------------
- UI PROPERTY DEFAULTS BY ID AND CLASS NAME
----------------------------------------------

Using a similar method to setting UI Property Defaults by Element Type, you can set them
for your UI elements by their IDs or class names. Note that property defaults by ID are considered more
important than default properties by element type and class names, and will override them.

_Normal Code	
Not Supported	

_Redux Code		
$.setDefaultByID('myID', { text: 'Hello, World!', color: 'red' });	
$.setDefaultByClassName('myClass', { font: { fontSize: 12 }, color: 'green' });
var label = new Label({ id: 'myID', className: 'myClass', color: 'blue' });	
alert(label.text == 'Hello, World!');	
alert(label.color == 'blue');
alert(label.font.fontSize == 12);


----------------------------------------------
- EVENT BINDING
----------------------------------------------

Bind events in a more natural way. Note the wrapping $().

_Normal Code	
var button = Titanium.UI.createButton({ title: 'Click Me!' });	
button.addEventListener('click', function() { alert('clicked!'); });	
button.fireEvent('click');	
button.fireEvent('click', {src: 'me'});	

_Redux Code	
var button = new Button({ title: 'Click Me!' });	
$(button).click(function() { alert('clicked!'); });	
         .click();	
         .click({src: 'me'});	


You can add support for custom events.	
_Normal Code	
button.addEventListener('myCustomEvent', function() { });	

_Redux Code	
$.addEventBinder('myCustomEvent');	// only needs to be called once, then can be used again and again
$(button).myCustomEvent(function() { });	


----------------------------------------------
- JSS
----------------------------------------------

JSS, or JavaScript Style Sheets, let you create CSS-like rules to style your UI elements.
Note that JSS can only style elements you create using Redux's method of creating elements,
and that this isn't actual CSS.

_Normal Code
Not Supported until Version 1.5 (even then, some features here won't be supported)

_Redux Code for Including JSS from your app.js (or any .js file)
includeJSS('common.jss');

_Redux Code for Styling Elements from common.jss (or any .jss file)
Window {
	backgroundColor: '#fff'
}
Label {
	backgroundColor: '#faa',
	color: '#333'
}
/* add an attribute that will act as a filter */
Label[Platform.osname="android"] {
	backgroundColor: '#aaf',
	color: '#666'
}
/* select by id */
#HelloWorld {
	left: 15,
	right: 15,
	height: 70,
	top: 50
}
#HelloWorld[Platform.locale="en"] {
    text: 'Hello, World!'
}
#HelloWorld[Platform.locale="es"] {
    text: '¡Bienvenido, Mundo!'
}
/* select by className */
.myClass {
	text: 'Set by class'
}


Here are some key features to note--you'll want to use them:
	1) Include as many .jss files as you need to keep yourself organized.
	2) Have as many rules as you need.
	3) Have multiple rules for a single element.
	4) Attributes can use anything in the Ti namespace. I happened to use Platform.locale.
	5) Attributes can work negatively too -- [Platform.locale!="en"]
	6) White space doesn't matter; put it where you want it.
	7) You can localize your app using the [Platform.locale="whatever"] attribute.
	8) The includeJSS function can take in multiple files or just one; it's up to you.
	9) #HelloWorld has higher precedence than the Label rule.

Here are some things you CANNOT do yet, but that will be supported soon:
	1) Chaining selectors (ie Window, Label { backgroundColor: '#fff' }).
	2) Chaining attributes (ie Window[Platform.osname="iphone"][Platform.osname="ipad"]).


-----------------------------------------------------------------------------------------
- CONTACT INFORMATION
-----------------------------------------------------------------------------------------

Redux was made by Dawson Toth from TothSolutions, LLC. (www.tothsolutions.com).
TothSolutions, LLC. uses Appcelerator every day to create mobile applications for
its clients, and created Redux to ease that process and give back to the community
that created Appcelerator.

We can be contacted through our website -- www.tothsolutions.com/Contact